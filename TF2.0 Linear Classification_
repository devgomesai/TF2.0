{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMTU1Q/cqdcagzsZUXDUI8o"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KMhaGRpB7mQ-","executionInfo":{"status":"ok","timestamp":1727330708954,"user_tz":-330,"elapsed":10226,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"1f285998-edce-44e1-9e8b-67e7b3b1600b"},"outputs":[{"output_type":"stream","name":"stdout","text":["2.17.0\n"]}],"source":["import tensorflow as tf\n","print(tf.__version__)"]},{"cell_type":"code","source":["# Load in the data\n","from sklearn.datasets import load_breast_cancer"],"metadata":{"id":"fvc6B-f67p1a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# load the data\n","data = load_breast_cancer()"],"metadata":{"id":"vfy1CLy17yZg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# check the type of 'data'\n","type(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":186},"id":"RZesV0RQ70Ce","executionInfo":{"status":"ok","timestamp":1727330736572,"user_tz":-330,"elapsed":423,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"9576bb94-077d-4fae-aca0-b310c35538b4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sklearn.utils._bunch.Bunch"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>sklearn.utils._bunch.Bunch</b><br/>def __init__(**kwargs)</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/sklearn/utils/_bunch.py</a>Container object exposing keys as attributes.\n","\n","Bunch objects are sometimes used as an output for functions and methods.\n","They extend dictionaries by enabling values to be accessed by key,\n","`bunch[&quot;value_key&quot;]`, or by an attribute, `bunch.value_key`.\n","\n","Examples\n","--------\n","&gt;&gt;&gt; from sklearn.utils import Bunch\n","&gt;&gt;&gt; b = Bunch(a=1, b=2)\n","&gt;&gt;&gt; b[&#x27;b&#x27;]\n","2\n","&gt;&gt;&gt; b.b\n","2\n","&gt;&gt;&gt; b.a = 3\n","&gt;&gt;&gt; b[&#x27;a&#x27;]\n","3\n","&gt;&gt;&gt; b.c = 6\n","&gt;&gt;&gt; b[&#x27;c&#x27;]\n","6</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 4);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# note: it is a Bunch object\n","# this basically acts like a dictionary where you can treat the keys like attributes\n","data.keys()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rufFsQnm71WA","executionInfo":{"status":"ok","timestamp":1727330742043,"user_tz":-330,"elapsed":434,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"6dfc310d-ead0-4faa-ffe7-ced480deeadf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename', 'data_module'])"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# 'data' (the attribute) means the input data\n","data.data.shape\n","# it has 569 samples, 30 features"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BNdd-3U672qB","executionInfo":{"status":"ok","timestamp":1727330750185,"user_tz":-330,"elapsed":652,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"57e9121e-1772-46b0-a379-84370b4c4dec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569, 30)"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# 'targets'\n","data.target\n","# note how the targets are just 0s and 1s\n","# normally, when you have K targets, they are labeled 0..K-1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kJVu0aRz74la","executionInfo":{"status":"ok","timestamp":1727330758315,"user_tz":-330,"elapsed":412,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"fecf4939-a9e6-460e-9fcc-1f72ca9c80c3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0,\n","       1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0,\n","       1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n","       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,\n","       0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1,\n","       1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0,\n","       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0,\n","       1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1,\n","       1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0,\n","       0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,\n","       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,\n","       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1,\n","       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1,\n","       1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,\n","       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n","       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1,\n","       1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# their meaning is not lost\n","data.target_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eu6tcaLD76pa","executionInfo":{"status":"ok","timestamp":1727330765450,"user_tz":-330,"elapsed":678,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"9344b3b7-4daf-45c8-d5e5-bc972ab76322"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['malignant', 'benign'], dtype='<U9')"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# there are also 569 corresponding targets\n","data.target.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ezLICGJL78U2","executionInfo":{"status":"ok","timestamp":1727330769613,"user_tz":-330,"elapsed":415,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"53ab6709-b051-4d31-e75b-527d3b869822"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(569,)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# you can also determine the meaning of each feature\n","data.feature_names"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wQdTudzd79aK","executionInfo":{"status":"ok","timestamp":1727330774836,"user_tz":-330,"elapsed":549,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"8c2c85b0-4c34-4536-d202-bbfef4aa239b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n","       'mean smoothness', 'mean compactness', 'mean concavity',\n","       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n","       'radius error', 'texture error', 'perimeter error', 'area error',\n","       'smoothness error', 'compactness error', 'concavity error',\n","       'concave points error', 'symmetry error',\n","       'fractal dimension error', 'worst radius', 'worst texture',\n","       'worst perimeter', 'worst area', 'worst smoothness',\n","       'worst compactness', 'worst concavity', 'worst concave points',\n","       'worst symmetry', 'worst fractal dimension'], dtype='<U23')"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# normally we would put all of our imports at the top\n","# but this lets us tell a story\n","from sklearn.model_selection import train_test_split\n","\n","\n","# split the data into train and test sets\n","# this lets us simulate how our model will perform in the future\n","X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.33)\n","N, D = X_train.shape"],"metadata":{"id":"Il8IOsVg7-pc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Scale the data\n","# you'll learn why scaling is needed in a later course\n","from sklearn.preprocessing import StandardScaler\n","\n","scaler = StandardScaler()\n","X_train = scaler.fit_transform(X_train)\n","X_test = scaler.transform(X_test)"],"metadata":{"id":"aE2syykd8C2H"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now all the fun Tensorflow stuff\n","# Build the model\n","\n","model = tf.keras.models.Sequential([\n","  tf.keras.layers.Input(shape=(D,)),\n","  tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","# Alternatively, you can do:\n","# model = tf.keras.models.Sequential()\n","# model.add(tf.keras.layers.Dense(1, input_shape=(D,), activation='sigmoid'))\n","\n","model.compile(optimizer='adam',\n","              loss='binary_crossentropy',\n","              metrics=['accuracy'])\n","\n","\n","# Train the model\n","r = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100)\n","\n","\n","# Evaluate the model - evaluate() returns loss and accuracy\n","print(\"Train score:\", model.evaluate(X_train, y_train))\n","print(\"Test score:\", model.evaluate(X_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D-BzQm638FzC","executionInfo":{"status":"ok","timestamp":1727330821560,"user_tz":-330,"elapsed":16671,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"09f30d4e-2539-4412-cbbd-5375d3735e36"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 40ms/step - accuracy: 0.1650 - loss: 1.5753 - val_accuracy: 0.2394 - val_loss: 1.3387\n","Epoch 2/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.2144 - loss: 1.3444 - val_accuracy: 0.2500 - val_loss: 1.2318\n","Epoch 3/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.2291 - loss: 1.2226 - val_accuracy: 0.3032 - val_loss: 1.1315\n","Epoch 4/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.2439 - loss: 1.1847 - val_accuracy: 0.3511 - val_loss: 1.0366\n","Epoch 5/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.3309 - loss: 1.0459 - val_accuracy: 0.3936 - val_loss: 0.9535\n","Epoch 6/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.3577 - loss: 0.9461 - val_accuracy: 0.4468 - val_loss: 0.8782\n","Epoch 7/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.3840 - loss: 0.9232 - val_accuracy: 0.4947 - val_loss: 0.8099\n","Epoch 8/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.4462 - loss: 0.8004 - val_accuracy: 0.5479 - val_loss: 0.7519\n","Epoch 9/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.5381 - loss: 0.7150 - val_accuracy: 0.6064 - val_loss: 0.7017\n","Epoch 10/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.6002 - loss: 0.6700 - val_accuracy: 0.6489 - val_loss: 0.6580\n","Epoch 11/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6116 - loss: 0.6385 - val_accuracy: 0.6809 - val_loss: 0.6195\n","Epoch 12/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6526 - loss: 0.6078 - val_accuracy: 0.6915 - val_loss: 0.5858\n","Epoch 13/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6910 - loss: 0.5741 - val_accuracy: 0.7394 - val_loss: 0.5565\n","Epoch 14/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.7362 - loss: 0.5322 - val_accuracy: 0.7500 - val_loss: 0.5302\n","Epoch 15/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.7514 - loss: 0.5405 - val_accuracy: 0.7766 - val_loss: 0.5055\n","Epoch 16/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.7555 - loss: 0.5051 - val_accuracy: 0.7872 - val_loss: 0.4841\n","Epoch 17/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8172 - loss: 0.4519 - val_accuracy: 0.7926 - val_loss: 0.4645\n","Epoch 18/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8133 - loss: 0.4274 - val_accuracy: 0.7979 - val_loss: 0.4471\n","Epoch 19/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8144 - loss: 0.4497 - val_accuracy: 0.8032 - val_loss: 0.4305\n","Epoch 20/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8333 - loss: 0.4029 - val_accuracy: 0.8245 - val_loss: 0.4157\n","Epoch 21/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8620 - loss: 0.3893 - val_accuracy: 0.8298 - val_loss: 0.4021\n","Epoch 22/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8875 - loss: 0.3631 - val_accuracy: 0.8617 - val_loss: 0.3892\n","Epoch 23/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8802 - loss: 0.3497 - val_accuracy: 0.8670 - val_loss: 0.3774\n","Epoch 24/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.8694 - loss: 0.3525 - val_accuracy: 0.8670 - val_loss: 0.3661\n","Epoch 25/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8730 - loss: 0.3534 - val_accuracy: 0.8830 - val_loss: 0.3558\n","Epoch 26/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8890 - loss: 0.3288 - val_accuracy: 0.8830 - val_loss: 0.3463\n","Epoch 27/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8959 - loss: 0.3216 - val_accuracy: 0.8830 - val_loss: 0.3373\n","Epoch 28/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8942 - loss: 0.3155 - val_accuracy: 0.8830 - val_loss: 0.3287\n","Epoch 29/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9000 - loss: 0.3093 - val_accuracy: 0.8830 - val_loss: 0.3207\n","Epoch 30/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8919 - loss: 0.3001 - val_accuracy: 0.8883 - val_loss: 0.3133\n","Epoch 31/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9063 - loss: 0.2962 - val_accuracy: 0.8883 - val_loss: 0.3063\n","Epoch 32/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9009 - loss: 0.2854 - val_accuracy: 0.8936 - val_loss: 0.2995\n","Epoch 33/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9059 - loss: 0.2792 - val_accuracy: 0.8989 - val_loss: 0.2931\n","Epoch 34/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9056 - loss: 0.2840 - val_accuracy: 0.8989 - val_loss: 0.2870\n","Epoch 35/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9311 - loss: 0.2583 - val_accuracy: 0.9043 - val_loss: 0.2813\n","Epoch 36/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9169 - loss: 0.2638 - val_accuracy: 0.8989 - val_loss: 0.2757\n","Epoch 37/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9331 - loss: 0.2495 - val_accuracy: 0.8989 - val_loss: 0.2705\n","Epoch 38/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9352 - loss: 0.2266 - val_accuracy: 0.8989 - val_loss: 0.2657\n","Epoch 39/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9316 - loss: 0.2419 - val_accuracy: 0.8989 - val_loss: 0.2609\n","Epoch 40/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9240 - loss: 0.2288 - val_accuracy: 0.9202 - val_loss: 0.2562\n","Epoch 41/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9291 - loss: 0.2344 - val_accuracy: 0.9202 - val_loss: 0.2517\n","Epoch 42/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9291 - loss: 0.2170 - val_accuracy: 0.9202 - val_loss: 0.2474\n","Epoch 43/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9360 - loss: 0.2134 - val_accuracy: 0.9202 - val_loss: 0.2436\n","Epoch 44/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9165 - loss: 0.2245 - val_accuracy: 0.9255 - val_loss: 0.2394\n","Epoch 45/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9442 - loss: 0.2097 - val_accuracy: 0.9309 - val_loss: 0.2357\n","Epoch 46/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9413 - loss: 0.1950 - val_accuracy: 0.9309 - val_loss: 0.2322\n","Epoch 47/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9374 - loss: 0.2209 - val_accuracy: 0.9309 - val_loss: 0.2287\n","Epoch 48/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9338 - loss: 0.2105 - val_accuracy: 0.9309 - val_loss: 0.2254\n","Epoch 49/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9312 - loss: 0.2029 - val_accuracy: 0.9309 - val_loss: 0.2221\n","Epoch 50/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9406 - loss: 0.2011 - val_accuracy: 0.9309 - val_loss: 0.2190\n","Epoch 51/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9510 - loss: 0.1956 - val_accuracy: 0.9362 - val_loss: 0.2161\n","Epoch 52/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9384 - loss: 0.2115 - val_accuracy: 0.9362 - val_loss: 0.2130\n","Epoch 53/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9314 - loss: 0.2045 - val_accuracy: 0.9362 - val_loss: 0.2102\n","Epoch 54/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9409 - loss: 0.1833 - val_accuracy: 0.9415 - val_loss: 0.2074\n","Epoch 55/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9488 - loss: 0.1650 - val_accuracy: 0.9415 - val_loss: 0.2048\n","Epoch 56/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9338 - loss: 0.2033 - val_accuracy: 0.9415 - val_loss: 0.2022\n","Epoch 57/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9437 - loss: 0.1676 - val_accuracy: 0.9415 - val_loss: 0.1998\n","Epoch 58/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9444 - loss: 0.1716 - val_accuracy: 0.9468 - val_loss: 0.1973\n","Epoch 59/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9488 - loss: 0.1599 - val_accuracy: 0.9468 - val_loss: 0.1950\n","Epoch 60/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9432 - loss: 0.1766 - val_accuracy: 0.9468 - val_loss: 0.1927\n","Epoch 61/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9460 - loss: 0.1608 - val_accuracy: 0.9468 - val_loss: 0.1905\n","Epoch 62/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9507 - loss: 0.1643 - val_accuracy: 0.9468 - val_loss: 0.1885\n","Epoch 63/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9459 - loss: 0.1685 - val_accuracy: 0.9521 - val_loss: 0.1864\n","Epoch 64/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9632 - loss: 0.1412 - val_accuracy: 0.9574 - val_loss: 0.1844\n","Epoch 65/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9530 - loss: 0.1588 - val_accuracy: 0.9574 - val_loss: 0.1822\n","Epoch 66/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9588 - loss: 0.1552 - val_accuracy: 0.9574 - val_loss: 0.1804\n","Epoch 67/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9396 - loss: 0.1735 - val_accuracy: 0.9574 - val_loss: 0.1785\n","Epoch 68/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9555 - loss: 0.1417 - val_accuracy: 0.9574 - val_loss: 0.1766\n","Epoch 69/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9410 - loss: 0.1573 - val_accuracy: 0.9574 - val_loss: 0.1749\n","Epoch 70/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9586 - loss: 0.1415 - val_accuracy: 0.9574 - val_loss: 0.1733\n","Epoch 71/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9589 - loss: 0.1322 - val_accuracy: 0.9574 - val_loss: 0.1716\n","Epoch 72/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9544 - loss: 0.1476 - val_accuracy: 0.9574 - val_loss: 0.1699\n","Epoch 73/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9583 - loss: 0.1326 - val_accuracy: 0.9574 - val_loss: 0.1683\n","Epoch 74/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9429 - loss: 0.1535 - val_accuracy: 0.9574 - val_loss: 0.1668\n","Epoch 75/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9497 - loss: 0.1487 - val_accuracy: 0.9574 - val_loss: 0.1652\n","Epoch 76/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9470 - loss: 0.1382 - val_accuracy: 0.9574 - val_loss: 0.1637\n","Epoch 77/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9541 - loss: 0.1341 - val_accuracy: 0.9574 - val_loss: 0.1624\n","Epoch 78/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9458 - loss: 0.1523 - val_accuracy: 0.9574 - val_loss: 0.1610\n","Epoch 79/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9453 - loss: 0.1505 - val_accuracy: 0.9574 - val_loss: 0.1597\n","Epoch 80/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9635 - loss: 0.1397 - val_accuracy: 0.9574 - val_loss: 0.1583\n","Epoch 81/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9660 - loss: 0.1167 - val_accuracy: 0.9574 - val_loss: 0.1569\n","Epoch 82/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9531 - loss: 0.1454 - val_accuracy: 0.9574 - val_loss: 0.1556\n","Epoch 83/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9630 - loss: 0.1203 - val_accuracy: 0.9574 - val_loss: 0.1544\n","Epoch 84/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9739 - loss: 0.1196 - val_accuracy: 0.9574 - val_loss: 0.1531\n","Epoch 85/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9636 - loss: 0.1182 - val_accuracy: 0.9574 - val_loss: 0.1520\n","Epoch 86/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9544 - loss: 0.1299 - val_accuracy: 0.9574 - val_loss: 0.1509\n","Epoch 87/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9347 - loss: 0.1664 - val_accuracy: 0.9574 - val_loss: 0.1499\n","Epoch 88/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9409 - loss: 0.1500 - val_accuracy: 0.9574 - val_loss: 0.1488\n","Epoch 89/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9691 - loss: 0.1204 - val_accuracy: 0.9574 - val_loss: 0.1477\n","Epoch 90/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9616 - loss: 0.1207 - val_accuracy: 0.9574 - val_loss: 0.1467\n","Epoch 91/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9406 - loss: 0.1482 - val_accuracy: 0.9628 - val_loss: 0.1457\n","Epoch 92/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9638 - loss: 0.1222 - val_accuracy: 0.9628 - val_loss: 0.1447\n","Epoch 93/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9607 - loss: 0.1226 - val_accuracy: 0.9628 - val_loss: 0.1437\n","Epoch 94/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9661 - loss: 0.1162 - val_accuracy: 0.9628 - val_loss: 0.1427\n","Epoch 95/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9706 - loss: 0.1233 - val_accuracy: 0.9628 - val_loss: 0.1418\n","Epoch 96/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9697 - loss: 0.1178 - val_accuracy: 0.9628 - val_loss: 0.1408\n","Epoch 97/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9597 - loss: 0.1202 - val_accuracy: 0.9628 - val_loss: 0.1400\n","Epoch 98/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9604 - loss: 0.1291 - val_accuracy: 0.9628 - val_loss: 0.1391\n","Epoch 99/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.9625 - loss: 0.1215 - val_accuracy: 0.9628 - val_loss: 0.1383\n","Epoch 100/100\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9718 - loss: 0.1234 - val_accuracy: 0.9628 - val_loss: 0.1373\n","\u001b[1m12/12\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.9661 - loss: 0.1205 \n","Train score: [0.12160897254943848, 0.9685039520263672]\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9628 - loss: 0.1345 \n","Test score: [0.13734863698482513, 0.9627659320831299]\n"]}]},{"cell_type":"code","source":["# Plot what's returned by model.fit()\n","import matplotlib.pyplot as plt\n","plt.plot(r.history['loss'], label='loss')\n","plt.plot(r.history['val_loss'], label='val_loss')\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"9HmZhFLh8LaV","executionInfo":{"status":"ok","timestamp":1727330829067,"user_tz":-330,"elapsed":960,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"b24e0768-b885-47c8-99b3-b6b772a6c7c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f67e48d7670>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAiMAAAGdCAYAAADAAnMpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABRG0lEQVR4nO3deXxU9b3/8dcsmcm+kw3Cvu8IgoCtqLGIFrVaaysVl2p/WmxVbnuVWlHbq9jNa6uoldatVXG5aq1Sl6KIC7IHkX0JJEAWkpBM9klmzu+Pk5kkEDAJSU6W9/PxOI9z5pwzM585WvPu93y/32MzDMNARERExCJ2qwsQERGR3k1hRERERCylMCIiIiKWUhgRERERSymMiIiIiKUURkRERMRSCiMiIiJiKYURERERsZTT6gJawu/3c+TIEaKiorDZbFaXIyIiIi1gGAZlZWWkpaVht5+8/aNbhJEjR46Qnp5udRkiIiLSBjk5OfTr1++kx7tFGImKigLMHxMdHW1xNSIiItISHo+H9PT04N/xk+kWYSRwayY6OlphREREpJv5ui4W6sAqIiIillIYEREREUspjIiIiIilukWfERER6d0Mw6Curg6fz2d1KdKIw+HA6XSe9rQbCiMiItKleb1ecnNzqaystLoUaUZ4eDipqam4XK42f4bCiIiIdFl+v5+srCwcDgdpaWm4XC5NftlFGIaB1+vl6NGjZGVlMWzYsFNObHYqCiMiItJleb1e/H4/6enphIeHW12OHCcsLIyQkBAOHjyI1+slNDS0TZ+jDqwiItLltfX/cUvHa49/NvqnKyIiIpZSGBERERFLKYyIiIh0gFmzZnH77bdbXUa3oDAiIiIilurVYeS5zw/w369t4UBhhdWliIiI9Fq9Ooy8vvkwr2w4xI5cj9WliIhICxmGQaW3zpLFMIw21Xzs2DHmz59PXFwc4eHhzJkzhz179gSPHzx4kLlz5xIXF0dERARjxoxhxYoVwffOmzePPn36EBYWxrBhw3jmmWfa5Vp2Fb16npHBiRFsySlhv1pGRES6japaH6MXv2fJd2//9WzCXa3/03ndddexZ88e3nrrLaKjo7nzzju56KKL2L59OyEhISxYsACv18vq1auJiIhg+/btREZGAnDPPfewfft2/v3vf5OYmMjevXupqqpq759mqV4dRgYlRgCQpTAiIiIdJBBCPvvsM2bMmAHACy+8QHp6Om+++SZXXnkl2dnZXHHFFYwbNw6AwYMHB9+fnZ3NpEmTmDJlCgADBw7s9N/Q0Xp1GBncxwwj+4+WW1yJiIi0VFiIg+2/nm3Zd7fWjh07cDqdTJs2LbgvISGBESNGsGPHDgB+9rOfccstt/D++++TkZHBFVdcwfjx4wG45ZZbuOKKK9i0aRPf+ta3uOyyy4Khpqfo1X1G1DIiItL92Gw2wl1OS5aOei7OjTfeyP79+7nmmmvYunUrU6ZM4dFHHwVgzpw5HDx4kDvuuIMjR45w/vnn8/Of/7xD6rBKrw4jAxPMMHKsspZjFV6LqxERkZ5o1KhR1NXVsXbt2uC+oqIidu3axejRo4P70tPTufnmm3n99df5r//6L5YtWxY81qdPH6699lr+8Y9/8Mgjj/DUU0916m/oaL36Nk2E20lKdCh5nmqyiiqIi2j7449FRESaM2zYMC699FJuuukm/vKXvxAVFcVdd91F3759ufTSSwG4/fbbmTNnDsOHD+fYsWN89NFHjBo1CoDFixczefJkxowZQ01NDW+//XbwWE/Rq1tGoKHfSNZR3aoREZGO8cwzzzB58mS+/e1vM336dAzDYMWKFYSEhADg8/lYsGABo0aN4sILL2T48OE8/vjjALhcLhYtWsT48eP55je/icPhYPny5Vb+nHZnM9o6aLoTeTweYmJiKC0tJTo6ul0/++43tvLC2mwWnDuEX8we2a6fLSIip6e6upqsrCwGDRrU5sfTS8c61T+jlv797vUtI+rEKiIiYq1eH0YahvcqjIiIiFhBYSTRnOHuQFEFfn+Xv2MlIiLS4/T6MNIvLgyn3UZ1rZ9cT7XV5YiIiPQ6rQ4jq1evZu7cuaSlpWGz2XjzzTdb/N7PPvsMp9PJxIkTW/u1HcbpsNM/IRzQiBoRERErtDqMVFRUMGHCBJYuXdqq95WUlDB//nzOP//81n5lhxsc7MSqaeFFREQ6W6snPZszZw5z5sxp9RfdfPPNXH311Tgcjla1pnSGwX0iYUeBnt4rIiJigU7pM/LMM8+wf/9+7r333hadX1NTg8fjabJ0pMDwXo2oERER6XwdHkb27NnDXXfdxT/+8Q+czpY1xCxZsoSYmJjgkp6e3qE1aq4RERER63RoGPH5fFx99dXcf//9DB8+vMXvW7RoEaWlpcElJyenA6tsmGvk0LFKaup8HfpdIiIiLTFw4EAeeeSRFp3b2gElXU2HPiivrKyMDRs2sHnzZm699VYA/H4/hmHgdDp5//33Oe+88054n9vtxu12d2RpTfSJdBPpdlJeU0dOcSVDk6I67btFRER6uw4NI9HR0WzdurXJvscff5wPP/yQ1157jUGDBnXk17eYzWZjUGIEWw+Xsu9ohcKIiIhIJ2r1bZry8nIyMzPJzMwEICsri8zMTLKzswHzFsv8+fPND7fbGTt2bJMlKSmJ0NBQxo4dS0RERPv9ktOkfiMiIt2EYYC3wpqlhc+Wfeqpp0hLS8Pv9zfZf+mll3LDDTewb98+Lr30UpKTk4mMjOTMM8/kP//5T7tdoq1bt3LeeecRFhZGQkICP/7xjykvb5i+YtWqVUydOpWIiAhiY2OZOXMmBw8eBGDLli2ce+65REVFER0dzeTJk9mwYUO71dacVreMbNiwgXPPPTf4euHChQBce+21PPvss+Tm5gaDSXcS6Deiic9ERLq42kp4MM2a7/7lEXB9/f+RvvLKK/npT3/KRx99FJxfq7i4mHfffZcVK1ZQXl7ORRddxAMPPIDb7eb5559n7ty57Nq1i/79+59WiRUVFcyePZvp06ezfv16CgoKuPHGG7n11lt59tlnqaur47LLLuOmm27ipZdewuv1sm7dOmw2GwDz5s1j0qRJPPHEEzgcDjIzMwkJCTmtmr5Oq8PIrFmzME6RDJ999tlTvv++++7jvvvua+3Xdji1jIiISHuJi4tjzpw5vPjii8Ew8tprr5GYmMi5556L3W5nwoQJwfN/85vf8MYbb/DWW28F+1i21Ysvvkh1dTXPP/988A7EY489xty5c/ntb39LSEgIpaWlfPvb32bIkCEAjBo1Kvj+7OxsfvGLXzBy5EgAhg0bdlr1tESH9hnpTgIPzNuvWVhFRLq2kHCzhcKq726hefPmcdNNN/H444/jdrt54YUX+P73v4/dbqe8vJz77ruPd955h9zcXOrq6qiqqmqXOws7duxgwoQJTbpCzJw5E7/fz65du/jmN7/Jddddx+zZs7ngggvIyMjge9/7HqmpqYB5x+PGG2/k73//OxkZGVx55ZXB0NJRev2D8gIGJpr/ghWWeymtqrW4GhEROSmbzbxVYsVSfyujJebOnYthGLzzzjvk5OTwySefMG/ePAB+/vOf88Ybb/Dggw/yySefkJmZybhx4/B6vR111Zp45plnWLNmDTNmzODll19m+PDhfPHFF4B5B2Pbtm1cfPHFfPjhh4wePZo33nijQ+tRGKkXFRpCUpQ5nPiAbtWIiMhpCg0N5fLLL+eFF17gpZdeYsSIEZxxxhmA+eDY6667ju985zuMGzeOlJQUDhw40C7fO2rUKLZs2UJFRcPfss8++wy73c6IESOC+yZNmsSiRYv4/PPPGTt2LC+++GLw2PDhw7njjjt4//33ufzyy3nmmWfapbaTURhpRP1GRESkPc2bN4933nmHp59+OtgqAmY/jNdff53MzEy2bNnC1VdffcLIm9P5ztDQUK699lq++uorPvroI376059yzTXXkJycTFZWFosWLWLNmjUcPHiQ999/nz179jBq1Ciqqqq49dZbWbVqFQcPHuSzzz5j/fr1TfqUdAT1GWlkcJ8I1mYVs/+o+o2IiMjpO++884iPj2fXrl1cffXVwf0PP/wwN9xwAzNmzCAxMZE777yz3Z7DFh4eznvvvcdtt93GmWeeSXh4OFdccQUPP/xw8PjOnTt57rnnKCoqIjU1lQULFvD//t//o66ujqKiIubPn09+fj6JiYlcfvnl3H///e1S28nYjFMNjekiPB4PMTExlJaWEh0d3WHf89TqfTy4YiffHp/KY1ef0WHfIyIiLVNdXU1WVhaDBg0iNDTU6nKkGaf6Z9TSv9+6TdNIcESN5hoRERHpNL07jKz4BTx5NuR9BTRMfLa/sBy/v8s3GImISC/wwgsvEBkZ2ewyZswYq8trF727z0j+Nsjbaq5TxtI/PhyXw051rZ8jpVX0i2v5eHIREZGOcMkllzBt2rRmj3X0zKidpXeHkT4j4eBnULAdAKfDzsDEcHbnl7O3oFxhRERELBcVFUVUVM9+gGvvvk2TVD9UqWBHcNeQPma/kb0FGlEjItJVdIOxFr1We/yz6eVhZLS5PtoQRoYmmWFkn4b3iohYLnAborKy0uJK5GQC/2xO55ZR775NE2gZKcmGmjJwRwXDiFpGRESs53A4iI2NpaCgADDnyLC1Ykp26TiGYVBZWUlBQQGxsbE4HI42f1bvDiPh8RCZDOX5cHQX9Jui2zQiIl1MSkoKQDCQSNcSGxsb/GfUVr07jIDZOlKeb/YbqQ8jNhscq6ylqLyGhEi31RWKiPRqNpuN1NRUkpKSqK3Vg0y7kpCQkNNqEQlQGOkzCvavCnZiDXM56BsbxqFjVewtKFcYERHpIhwOR7v84ZOup3d3YIWGfiPNdGLdq06sIiIiHU5hJDCiptHw3qH1/Ub2FWhaeBERkY6mMNJnhLkuy4WqY4BaRkRERDqTwkhoNMSkm9sFO4FGc41oRI2IiEiHUxiBRjOxmtPCB4b3Hi6poqKmzqqqREREegWFETCfUQPBfiNxES4SIlwA7D+qfiMiIiIdSWEEGk0LvzO4a0iw30iZFRWJiIj0GgojAEmBlpHtwV2aFl5ERKRzKIwAJI4AbFBZBOVHgYbhvQojIiIiHUthBMAVDvGDzO361hG1jIiIiHQOhZGAPoERNWYn1kAYOVhUSa3Pb1VVIiIiPZ7CSMBx08KnxoQS4XJQ5zc4WFRpYWEiIiI9m8JIQFLTlhGbzdYwoka3akRERDqMwkhA4zBiGECjZ9RoWngREZEOozASkDAM7E6o8YDnCIBaRkRERDqBwkiA0wUJQ83t4zqxKoyIiIh0HIWRxgLTwh9tGkb2HS3H7zesqkpERKRHUxhpLDAtfH3LSP/4cJx2G5VeH7meagsLExER6bkURho77um9IQ47AxMjAN2qERER6SgKI40FW0Z2gt8HwLD6WzV78vXAPBERkY6gMNJY/CAICYe6KijeD8CIlCgAduYpjIiIiHQEhZHG7I6GWzX5XwEwMiUagJ15HquqEhER6dEURo6XPNZc55lhZHSqGUZ255dTp2fUiIiItLtWh5HVq1czd+5c0tLSsNlsvPnmm6c8//XXX+eCCy6gT58+REdHM336dN5777221tvxAmEkfxsA/eLCiHA58Nb5ySqssLAwERGRnqnVYaSiooIJEyawdOnSFp2/evVqLrjgAlasWMHGjRs599xzmTt3Lps3b251sZ0ieYy5rr9NY7fbgv1GdqjfiIiISLtztvYNc+bMYc6cOS0+/5FHHmny+sEHH+Sf//wn//rXv5g0aVJrv77jBcJIaQ5UlUBYLKNSo9mUXcLOXA+XTEiztDwREZGeptP7jPj9fsrKyoiPjz/pOTU1NXg8niZLpwmLhZh0c7v+Vs3I+n4jO3LViVVERKS9dXoY+cMf/kB5eTnf+973TnrOkiVLiImJCS7p6emdWCEn9BsZpeG9IiIiHaZTw8iLL77I/fffzyuvvEJSUtJJz1u0aBGlpaXBJScnpxOrpFG/ka1Aw1wjuaXVlFR6O7cWERGRHq7Twsjy5cu58cYbeeWVV8jIyDjluW63m+jo6CZLp0pp2jISFRpCenwYADty1ToiIiLSnjoljLz00ktcf/31vPTSS1x88cWd8ZWnJ3ibZntwWnhNfiYiItIxWh1GysvLyczMJDMzE4CsrCwyMzPJzs4GzFss8+fPD57/4osvMn/+fP74xz8ybdo08vLyyMvLo7S0tH1+QUeIHwzOsPpp4bOARv1G1DIiIiLSrlodRjZs2MCkSZOCw3IXLlzIpEmTWLx4MQC5ubnBYALw1FNPUVdXx4IFC0hNTQ0ut912Wzv9hA7QZFp4s9/IqMCIGrWMiIiItKtWzzMya9YsDMM46fFnn322yetVq1a19iu6hpSxcGST2W9kzHeCw3t35ZXh8xs47DaLCxQREekZ9GyakznuGTX948MJC3FQU+fnQJGmhRcREWkvCiMnExzea46ocdhtDA9MC6/Jz0RERNqNwsjJBKeFzzanhQdGp6oTq4iISHtTGDmZsDiI7mduF2wHNLxXRESkIyiMnEpK034jI4O3adQyIiIi0l4URk4l2G+kPozUj6g5XFJFaVWtVVWJiIj0KAojpxKcidUMIzFhIfSNNaeF36WH5omIiLQLhZFTCYSRgh2NpoXXiBoREZH2pDByKglDwBkKtZXBaeFHBkbUqBOriIhIu1AYOZVTTQuvTqwiIiLtQmHk6wRnYjXDSGB4b2BaeBERETk9CiNfJ3WCuc79EoCBCeG4nXaqan0c1LTwIiIip01h5OukjDfXeWYYcTrsjNB8IyIiIu1GYeTrJI8BbFCeD2X5AIxKCfQbUSdWERGR06Uw8nXckZA4zNyubx0ZpRE1IiIi7UZhpCUCt2pytwAaUSMiItKeFEZaIrVpGGkyLXylpoUXERE5HQojLXFcJ9bG08Lv0K0aERGR06Iw0hKB4b3HDkB1KdD4Vo3CiIiIyOlQGGmJ8HiI7mdu109+NjpVz6gRERFpDwojLXXc5Gcj1YlVRESkXSiMtFRq034jgds0u/LLqPP5rapKRESk21MYaang8F4zjAyIDyfc5cBb5+eApoUXERFpM4WRlgq0jBzdCbVV2O224LTw23WrRkREpM0URloqui+ExYPhg4LtgEbUiIiItAeFkZay2RpNfta034jCiIiISNspjLTGcZOfaXiviIjI6VMYaY3jhveOqH96b76nhuIKr1VViYiIdGsKI60RCCP528DvI9LtZEBCOKDWERERkbZSGGmN+CEQEgF1VVC4B4BRKeo3IiIicjoURlrDboeUseZ28Am+gX4jGt4rIiLSFgojrZXS/EysahkRERFpG4WR1goO7zVbRkbXh5G9BeXUalp4ERGRVlMYaa1AJ9a8L8Ew6BcXRpTbidfnZ9/RcmtrExER6YYURlqrzyhwhkJ1KRTtw2azNeo3ols1IiIiraUw0lpOF6RONLcPrQca+o1sO6wwIiIi0loKI23Rb4q5rg8j4/vFArDlUIk19YiIiHRjCiNt0e9Mc10fRiamxwKw9XApderEKiIi0ioKI20RCCP528BbweDECKJCnVTX+tmVr/lGREREWqPVYWT16tXMnTuXtLQ0bDYbb7755te+Z9WqVZxxxhm43W6GDh3Ks88+24ZSu5CYvhCVBoYPjmRit9uYELhVk1NqbW0iIiLdTKvDSEVFBRMmTGDp0qUtOj8rK4uLL76Yc889l8zMTG6//XZuvPFG3nvvvVYX26Uc129kQnoMAJk5x6yqSEREpFtytvYNc+bMYc6cOS0+/8knn2TQoEH88Y9/BGDUqFF8+umn/O///i+zZ89u7dd3Hf3OhB1vNeo3EgeoZURERKS1OrzPyJo1a8jIyGiyb/bs2axZs+ak76mpqcHj8TRZupz0qeb60HowjGDLyO6CMspr6iwsTEREpHvp8DCSl5dHcnJyk33Jycl4PB6qqqqafc+SJUuIiYkJLunp6R1dZuulTgC7E8rzoTSHpKhQ+saGYRjwpYb4ioiItFiXHE2zaNEiSktLg0tOTo7VJZ0oJAxSxpnbxw3x1a0aERGRluvwMJKSkkJ+fn6Tffn5+URHRxMWFtbse9xuN9HR0U2WLik438gGQJ1YRURE2qLDw8j06dNZuXJlk30ffPAB06dP7+iv7ngnTH6mTqwiIiKt1eowUl5eTmZmJpmZmYA5dDczM5Ps7GzAvMUyf/784Pk333wz+/fv57//+7/ZuXMnjz/+OK+88gp33HFH+/wCKwWG9+ZugboaxvaNxmG3keepJq+02traREREuolWh5ENGzYwadIkJk2aBMDChQuZNGkSixcvBiA3NzcYTAAGDRrEO++8wwcffMCECRP44x//yF//+tfuPaw3IG4QhCeAzwt5Wwl3ORmebD7BV7dqREREWqbV84zMmjULwzBOery52VVnzZrF5s2bW/tVXZ/NBv2mwu5/m7dq+k1hYnoMO3I9ZOaUcuHYVKsrFBER6fK65GiabuW4mVgDI2rUMiIiItIyCiOn67hOrBMCT/A9VIrPf/IWJBERETEpjJyuvmcANijJhrJ8hiVFEeFyUOH1sbeg3OrqREREujyFkdPljoKk0eb2ofU47DbG9TPnG9mSU2JdXSIiIt2Ewkh7CPQbyVkLNNyq2awwIiIi8rUURtpD//oJ3LK/AGBSsBNriTX1iIiIdCMKI+1hwAxzfWQTeCuDLSO788uo9OoJviIiIqeiMNIeYvtDdD/w18Gh9aTGhJEWE4rPb7DpYInV1YmIiHRpCiPtwWZraB05+DkA0wYnALAuq8iqqkRERLoFhZH2EgwjnwEwdVA8AF9kFVtVkYiISLegMNJeBsw014fWQ52XafVhJDOnhOpan4WFiYiIdG0KI+0lcRiEJ0JdNRzZzKDECBIj3Xjr/JpvRERE5BQURtqLzQYD6of4HvwMm83GtMFm68ha3aoRERE5KYWR9hS4VVPfifWs+ls16xRGRERETkphpD0FOrHmrAW/j6mDzBE1Gw8eo9bnt7AwERGRrkthpD0ljwV3NNR4IP8rhiVFEhceQlWtjy8PlVpdnYiISJekMNKe7A7of5a5ffBz7HYbZw7UrRoREZFTURhpb8fNNxKY/GytJj8TERFplsJIe2vcidUwgvONbDhwDJ/fsLAwERGRrklhpL2lTgRnGFQWQeFuRqVGExXqpLymju1HPFZXJyIi0uUojLQ3pwv6TTG3D36Go1G/Ed2qEREROZHCSEc4br6RwHNqNPmZiIjIiRRGOkKgE+uBz5r0G1l/oBi/+o2IiIg0oTDSEfqdCfYQKDsCxfsZ2zeGcJeDkspadheUWV2diIhIl6Iw0hFc4ZA+1dzO+pgQh53JA+IAWLtft2pEREQaUxjpKINnmet9HwEEb9V8sV+dWEVERBpTGOkog88111mrwe9j+pBEANbsL9J8IyIiIo0ojHSUtEnmc2qqSyB3CxP6xRDpdlJSWav5RkRERBpRGOkoDicM/Ia5vf8jnA47Zw02b9V8tq/QwsJERES6FoWRjhToN7J/FQAzh5q3aj7bqzAiIiISoDDSkYbU9xvJ/gK8lcEwsv5AMdW1PgsLExER6ToURjpSwlCI7gs+L2SvYVhSJH2i3FTX+tmUfczq6kRERLoEhZGOZLM1uVVjs9mYOSQBgM/3aoiviIgIKIx0vMAQ3/3mfCOBWzWfqt+IiIgIoDDS8QafY67ztkJFYTCMfHmoBE91rYWFiYiIdA0KIx0tMgmSxpjbWR+TFhvG4MQI/AZ8sU+3akRERBRGOkNgVE391PAzhtb3G1EYERERURjpFI3nGzEMzla/ERERkSCFkc4wYAbYQ6A0B4r3c9bgBGw22FtQTr6n2urqRERELNWmMLJ06VIGDhxIaGgo06ZNY926dac8/5FHHmHEiBGEhYWRnp7OHXfcQXV1L/oj7IqA9Gnm9v6PiA13Ma5vDKDZWEVERFodRl5++WUWLlzIvffey6ZNm5gwYQKzZ8+moKCg2fNffPFF7rrrLu6991527NjB3/72N15++WV++ctfnnbx3UrgVs2e/wAwY0hganj1GxERkd6t1WHk4Ycf5qabbuL6669n9OjRPPnkk4SHh/P00083e/7nn3/OzJkzufrqqxk4cCDf+ta3+MEPfvC1rSk9zogLzfX+j8BbEew38tneQgzDsLAwERERa7UqjHi9XjZu3EhGRkbDB9jtZGRksGbNmmbfM2PGDDZu3BgMH/v372fFihVcdNFFJ/2empoaPB5Pk6XbSx4Lsf2hrhr2fciUgXG4nHbyPNXsO1pudXUiIiKWaVUYKSwsxOfzkZyc3GR/cnIyeXl5zb7n6quv5te//jVnn302ISEhDBkyhFmzZp3yNs2SJUuIiYkJLunp6a0ps2uy2WDkXHN7x9uEhjiYNigegJU7mr/FJSIi0ht0+GiaVatW8eCDD/L444+zadMmXn/9dd555x1+85vfnPQ9ixYtorS0NLjk5OR0dJmdY+TF5nr3u+Cr5YLRZqhTGBERkd7M2ZqTExMTcTgc5OfnN9mfn59PSkpKs++55557uOaaa7jxxhsBGDduHBUVFfz4xz/m7rvvxm4/MQ+53W7cbndrSuse+p8F4QlQWQQHP+e8kWey+J/b2HCwmGMVXuIiXFZXKCIi0ula1TLicrmYPHkyK1euDO7z+/2sXLmS6dOnN/ueysrKEwKHw+EA6H0dN+0OGDHH3N75Nv3iwhmVGo3fgI92qXVERER6p1bfplm4cCHLli3jueeeY8eOHdxyyy1UVFRw/fXXAzB//nwWLVoUPH/u3Lk88cQTLF++nKysLD744APuuece5s6dGwwlvUqg38jOd8AwyBiVBMB/duSf4k0iIiI9V6tu0wBcddVVHD16lMWLF5OXl8fEiRN59913g51as7Ozm7SE/OpXv8Jms/GrX/2Kw4cP06dPH+bOncsDDzzQfr+iOxl8DoREgOcw5GaSMWoQj364l9W7C6mp8+F29sKAJiIivZrN6Ab3SjweDzExMZSWlhIdHW11Oafv5Wtgx1vwjZ/jP/dXnLVkJQVlNTx/w1S+ObyP1dWJiIi0i5b+/dazaawwquFWjd1u43zdqhERkV5MYcQKwy4AuxOO7oCifWSMahji2w0aqkRERNqVwogVwuJg4DfM7Z1vM3NoIqEhdg6XVLEjt8za2kRERDqZwohVAhOg7XyH0BAHZw81+4qs1K0aERHpZRRGrBIIIznroCxPQ3xFRKTXUhixSnQa9JsKGPDV65xXH0a2HCqlwFNtbW0iIiKdSGHESuO/Z66/XE5SVCgT0mMBWLlTs7GKiEjvoTBipTGXm6NqcrdAwU4uqG8deX9b809AFhER6YkURqwUkQDDvmVuf7mcC8eaDxv8ZE8hxyq8FhYmIiLSeRRGrDb+KnP95asMTYxgdGo0dX6DFV/lWluXiIhIJ1EYsdrwC8EdA55DcPBTLpuUBsA/M49YXJiIiEjnUBixWkgojLnM3N7yMnMnpGGzwbqsYg6XVFlamoiISGdQGOkKJnzfXG//J6lhBlMHxgPwry1qHRERkZ5PYaQrSD8LYvuDtwx2reDSiX0B3aoREZHeQWGkK7DbG3VkfZmLxqUQ4rCxI9fD7nw9q0ZERHo2hZGuYnz9rZq9K4n1l3DOcHPOkbfUOiIiIj2cwkhXkTgU+k4Gwwdf/R+XTqwfVbPlMIZhWFyciIhIx1EY6UoCt2o2/4OMkUlEuBzkFFexKbvE0rJEREQ6ksJIVzLuSnCGQv5XhOVvYPYYc0bWtzIPW1yYiIhIx1EY6UrC42Hcd83t9X/lkvpbNW9/mUudz29hYSIiIh1HYaSrOfMmc73tTWam+EmIcFFU4WX1nqPW1iUiItJBFEa6mrSJ0O9M8NcSsuXvwTlHXlqXY21dIiIiHURhpCs680ZzveEZrj4zFYAPdxaQV1ptYVEiIiIdQ2GkKxp9GYQngOcwQ499xtRB8fj8Bi+vV+uIiIj0PAojXVFIKJwx39xev4yrp/YH4OX12fj8mnNERER6FoWRrmrKDYAN9q9iTmoZceEhHCmt5uPdBVZXJiIi0q4URrqq2P4w/EIA3Juf4Yoz+gHw4tpsK6sSERFpdwojXdnU+o6smS/yg0mJgNmR9UhJlYVFiYiItC+Fka5s8HkQPwRqPAw59AbTBsXjN1BHVhER6VEURroyux2m/8Tc/vxR5tUP831lQ45mZBURkR5DYaSrm/hDiEiC0hzmGJ8SFx5Cbmk1q3ZpRlYREekZFEa6upDQYOtIyJo/890zzOfVvLD2oJVViYiItBuFke5gyo/AHQOFu7ixz04APtp1lH1Hyy0uTERE5PQpjHQHodHBkTXJW5aSMTIJgL99mmVlVSIiIu1CYaS7mHYLOEPhyCb+a1guAP+38RBF5TUWFyYiInJ6FEa6i8g+wSniR+79K+P7xVBT5+fvX6jviIiIdG8KI93JjJ+C3Ykt62N+PrYCgOfXHKS61mdxYSIiIm2nMNKdxPaHcVcCcHbuc/SNDaO4wsvrmw5bXJiIiEjbKYx0N2ffAdiw73qHO8eZo2n++ul+/Hqar4iIdFNtCiNLly5l4MCBhIaGMm3aNNatW3fK80tKSliwYAGpqam43W6GDx/OihUr2lRwr9dnBEy8GoCL854gKtTB/qMVfLhTT/MVEZHuqdVh5OWXX2bhwoXce++9bNq0iQkTJjB79mwKCpr/Y+j1erngggs4cOAAr732Grt27WLZsmX07dv3tIvvtc79JTjcOHI+557hhwBY9sl+i4sSERFpm1aHkYcffpibbrqJ66+/ntGjR/Pkk08SHh7O008/3ez5Tz/9NMXFxbz55pvMnDmTgQMHcs455zBhwoTTLr7XiukH0/4fAN8pWobLbrA2q5gtOSXW1iUiItIGrQojXq+XjRs3kpGR0fABdjsZGRmsWbOm2fe89dZbTJ8+nQULFpCcnMzYsWN58MEH8flOPgKkpqYGj8fTZJHjfGMhhMYSUrST+wdsBeDPK/dYXJSIiEjrtSqMFBYW4vP5SE5ObrI/OTmZvLy8Zt+zf/9+XnvtNXw+HytWrOCee+7hj3/8I//zP/9z0u9ZsmQJMTExwSU9Pb01ZfYOYXHwjf8C4Mqy5wizeVm5s4BMtY6IiEg30+Gjafx+P0lJSTz11FNMnjyZq666irvvvpsnn3zypO9ZtGgRpaWlwSUnJ6ejy+yepv4YovvhLM/ld+lrAXj4g90WFyUiItI6rQojiYmJOBwO8vPzm+zPz88nJSWl2fekpqYyfPhwHA5HcN+oUaPIy8vD6/U2+x632010dHSTRZoREgrn3Q3AxaUvkmCvYPXuo2w4UGxxYSIiIi3XqjDicrmYPHkyK1euDO7z+/2sXLmS6dOnN/uemTNnsnfvXvx+f3Df7t27SU1NxeVytbFsCRp/FSSNwV5TymOp5nBptY6IiEh30urbNAsXLmTZsmU899xz7Nixg1tuuYWKigquv/56AObPn8+iRYuC599yyy0UFxdz2223sXv3bt555x0efPBBFixY0H6/ojezO2DOQwCcVfQmk537+HxfEWv2FVlcmIiISMs4W/uGq666iqNHj7J48WLy8vKYOHEi7777brBTa3Z2NnZ7Q8ZJT0/nvffe44477mD8+PH07duX2267jTvvvLP9fkVvN+ibMP772L5czmNRz3P2scX87we7OWvwWdhsNqurExEROSWbYRhdfh5xj8dDTEwMpaWl6j9yMuVH4bEpUF3Cg75reKp2Dv/40TTOHpZodWUiItJLtfTvt55N01NE9oELfg3Az0NeI5Ui/vD+LrpB1hQRkV5OYaQnmXQNpJ+Fy1/Fr93Pk5lTwr++zLW6KhERkVNSGOlJ7Hb49sNgd3KBbT3n2zfy0IodVHlPPtutiIiI1RRGeprkMTDdHKn0gOs5ykqLeWq1HqInIiJdl8JIT3TOnRA3kBQKuTfkeZ74eC9HSqqsrkpERKRZCiM9kSsCvvMXDJud7zpWM8v3Bb99d6fVVYmIiDRLYaSn6n8WtrPvAODBkL/yeeY2Nh48ZnFRIiIiJ1IY6cnOuQtSxhNvK+d3IU/x67e+wu/XUF8REelaFEZ6MqcLLn8Kw+HmXMcWxuS9wWsbD1ldlYiISBMKIz1d0ihsGfcB8CvnP3junZXklqozq4iIdB0KI73BtJvxD/wm4bYaHvL/L3e/tlEzs4qISJehMNIb2O3Yv/MkvtA4xtkPcHbWoyxfn2N1VSIiIoDCSO8R0xfHd54E4Abnu3z29vMcOlZpcVEiIiIKI73LiAvxT/sJAL+xPcFDy/+j0TUiImI5hZFexn7B/dT0GU+crZz5uf/DC2v2WV2SiIj0cgojvY3ThfsHz+F1RDDVvovy9x5g/9Fyq6sSEZFeTGGkN4ofjPPSPwNwi/11Xv7749T5/BYXJSIivZXCSC9lH/9dyif+CIDbS3/PK2+9ZXFFIiLSWymM9GKRc39HfvI3CLN5yci8ja+2b7O6JBER6YUURnozh5Pk61/kiGsQSbYSwl67msoyPUxPREQ6l8JIbxcaTeT1r1NELEP8B8h+6mrw+6yuSkREehGFESE6dTCHLnyaaiOEkWWfc+iFW0HTxYuISCdRGBEAJpx1Pv8ach9+w0a/fS9SsuI+q0sSEZFeQmFEgi65+haWRZkztMauf4SaTx61uCIREekNFEYkyO10cNmPF7PUfrX5euWvMDb/w+KqRESkp1MYkSaSo0M5a/4D/NV3MQDGP38KO962uCoREenJFEbkBJMHxhPx7SW8UncOdvz4X70Odq6wuiwREemhFEakWT+YNoAvz7ifd3xTsftrMV7+IWx9zeqyRESkB1IYkZNafMkEnk9bzOu+s7EZPoz/uxE2/d3qskREpIdRGJGTcjntPDF/Go9F/xcv1J2PDQPeuhW+eNLq0kREpAdRGJFTio9w8cwN03jYdTPL6i4yd757J6z+vSZGExGRdqEwIl9rQEIEf73uTP5ou4ZH6i43d374P/DuIvD7rS1ORES6PYURaZFJ/eP40/fP4E++73J/7TXmzrVPwBs/hjqvtcWJiEi3pjAiLTZ7TAr3fns0z/jmcJv3J/hsDtj6Kiz/AXgrrC5PRES6KYURaZXrZg7iF7NH8E//2dxQ83Nq7aGw9z/w/KVQftTq8kREpBtSGJFWW3DuUO6aM5KP/RP4XtUiqpzRcGg9PDULjmRaXZ6IiHQzCiPSJjefM4S7LxrFZmMY3664h+LQ/uA5BE9fqMnRRESkVRRGpM1u+uZgfnXxKPYZfZlVcg97Y6ZDXRX834/gg3vB77O6RBER6QYURuS03PiNwdw3dzQeIvhW/gI+TvqheeCzR+CF76ofiYiIfK02hZGlS5cycOBAQkNDmTZtGuvWrWvR+5YvX47NZuOyyy5ry9dKF3XdzEH89opxGDY712ZfxN/73oPhDIN9H8KTZ8OBT60uUUREurBWh5GXX36ZhQsXcu+997Jp0yYmTJjA7NmzKSgoOOX7Dhw4wM9//nO+8Y1vtLlY6bquOrM/j1w1EYfdxj37RvFA2lKMxBFQngfPzYWPf6fbNiIi0qxWh5GHH36Ym266ieuvv57Ro0fz5JNPEh4eztNPP33S9/h8PubNm8f999/P4MGDT6tg6boundiXpVefQYjDxl93h/Lj0N9TO+77YPjhowfgH5dDWZ7VZYqISBfTqjDi9XrZuHEjGRkZDR9gt5ORkcGaNWtO+r5f//rXJCUl8aMf/ahF31NTU4PH42mySPdw4dgUls2fQmiInQ/2ljM3Zx7HvvUnCAmH/avgiRmwc4XVZYqISBfSqjBSWFiIz+cjOTm5yf7k5GTy8pr/f7yffvopf/vb31i2bFmLv2fJkiXExMQEl/T09NaUKRabNSKJl388nT5RbnbmlXHBh/3YcclbkDIOKovMGVv/dbtmbRUREaCDR9OUlZVxzTXXsGzZMhITE1v8vkWLFlFaWhpccnJyOrBK6QgT0mN5c8FMRqZEUVhew2UvF/LvaS/AjJ+aJ2x8Bv5yDhzZbG2hIiJiuVaFkcTERBwOB/n5+U325+fnk5KScsL5+/bt48CBA8ydOxen04nT6eT555/nrbfewul0sm/fvma/x+12Ex0d3WSR7qdvbBiv3TKD80YmUVPn55aXv+IPxjX4fvgmRKVC0R5Ydj78536orba6XBERsUirwojL5WLy5MmsXLkyuM/v97Ny5UqmT59+wvkjR45k69atZGZmBpdLLrmEc889l8zMTN1+6QUi3U6WzZ/CDTMHAfDYR3u57uNwjl27CsZ8BwwffPowPDkTDp6835GIiPRczta+YeHChVx77bVMmTKFqVOn8sgjj1BRUcH1118PwPz58+nbty9LliwhNDSUsWPHNnl/bGwswAn7pedy2G0snjua8f1iWPT6Vj7ZU8jFy8p5/IePMHHsd+GdhVC0F565EM68Cc5fDKFqDRMR6S1a3Wfkqquu4g9/+AOLFy9m4sSJZGZm8u677wY7tWZnZ5Obm9vuhUr3d9mkvry5YCaDEyM4UlrNlU9+zvMlYzF+shYmXWOetH4ZLJ0K294Ew7C0XhER6Rw2w+j6/8X3eDzExMRQWlqq/iM9QFl1Lb949Uve3WaOwJo9JpnfXjGe2NzP4O074FiWeeKwb8FFv4e4gdYVKyIibdbSv996No10uqjQEJ744Rnc8+3RhDhsvLctnzl/+oR19gnwkzVwzp3gcMGe92HpWbD69+rgKiLSg6llRCz11eFSfvrSZrIKK7Db4GfnD+PWc4fiPLbP7EuStdo8MbY/XPBrGH0Z2GyW1iwiIi2jlhHpFsb2jeHtn57NFWf0w2/AI//Zw+VPfM6O2mSY/xZc/leISoOSbHj1OnhmDhzeZHXZIiLSjtQyIl3Gm5sPc88/v6Ksug6n3cbN5wzh1vOGEmpUw+ePwmd/gtpK8+SxV8CsX0LiUGuLFhGRk2rp32+FEelSCjzVLP7ntmDn1iF9InjoivGcOTAeSg/Dyl/Dl8vNk20OmHi12cckVnPWiIh0NQoj0q39e2su9/xzG4XlNQD8YGo6d144kthwF+RugQ8fgD3vmSc7XDD5ejj7dohOs65oERFpQmFEur3SyloeWLGdVzYcAiAhwsXdF4/iO5P6YrPZIHstfPgbOPCJ+QaHG86Yb4aSmH7WFS4iIoDCiPQg67KKufuNrewpKAfgrMHx/ObSsQxLjjInRsv6GFY9BNn108nbQ2DSD+HsOyBugIWVi4j0bgoj0qN46/z87dMs/rRyN9W1fhx2Gz+c1p/bM4YTF+EyQ8mBT2DVb+Hgp+abbA4Yd6XZUpI0ytL6RUR6I4UR6ZFyiiv5zdvbeX+7+eTomLAQbs8Yxg/PGkCIo36k+oFPzYnS9q9qeOOIi+DshZB+ZucXLSLSSymMSI/2+d5Cfv32dnbmlQHmqJuff2sEF45NMfuTABzeCJ/+L+x4G6j/17zfVJj+Exg5Fxytfk6kiIi0gsKI9Hg+v8Hy9dn88f3dFFd4ARjXN4b/+tZwzhnepyGUHN0Nnz0CX74C/lpzX0w6TP2x2eE1LNaS+kVEejqFEek1PNW1/PWTLP72yX4qvD4Apg6MZ+G3hnPW4ISGE8vyYf1fYcPfoLLI3OcMMydQm3ID9D1DU82LiLQjhRHpdYrKa3hi1T6e/+Ig3jo/YIaSn50/jJlDExpaSmqrYesr8MWTULCt4QNSxpmhZOx3IVT/nomInC6FEem1ckurWPrRXl5Zfwivzwwlk/rH8rPzhjFrRKPbN4YBOetgw9Ow7Q3wmROs4QyDMZfBpGtgwAy1loiItJHCiPR6uaVV/OXj/by0Lpua+paSUanR3HzOYC4el4rT0eg5kZXFkPkibHoOCnc37I8fDBPnwYTvayI1EZFWUhgRqVdQVs2y1ft5YW02lfV9SvrFhXHTNwbzvSnphLkcDScbBhxaD5v/Dl+9Dt7y+gM2GHyOGUxGfhtc4Z3/Q0REuhmFEZHjlFR6+fuagzz7+QGK6kffxISF8P0z0/nhWQNIjz8uYHgrYNubZotJYCI1AFcUjJoL46+Egd/UEGERkZNQGBE5iSqvj9c25rDskyyyiysBsNsgY1Qy180YyPQhjTq7Bhw7AFuWm8Gk5GDD/ogkGHu5OdNr38nqXyIi0ojCiMjX8PkNPtxZwHOfH+DTvYXB/UP6RDBv2gCumNyPmLCQpm/y+yFnLWx91ez0WlXccCy6H4y+1Oz82ncK2O2IiPRmCiMirbAnv4zn1hzg9U2Hg/1KQkPsXDIhjaunDWBCv5gTW0t8tbDvI3OY8K5/N+pfAkT3hZEXm/1LBswAx3GhRkSkF1AYEWmDsupa3sw8wgtfHAxONQ8wLCmS707ux3fO6EtSVOiJb6ytgr0rYfs/64NJw3sJjYXhF5rhZOj54Iro+B8iItIFKIyInAbDMNh48BgvrM1mxdbc4NBgh93GOcP78J1JfckYldx0JE5AbTXs/wh2vm0Gk8BsrwAONww513xw34g5EJnUSb9IRKTzKYyItBNPdS3vfJnLqxty2JRdEtwf4XIwe0wKl0xM4+yhiU3nLQnw+8w+Jjvehl3vmB1hg2zmFPTDvgVDL4C0SepnIiI9isKISAfYd7Sc1zcd4q0tR8gprgruj49wcdG4FL49Po2pA+Ox25sZVWMYULDDDCU7V8CRTU2Phyeat3EGnWPOaaJJ1kSkm1MYEelAhmGwKbuEtzIP8/aXucF5SwCSo91cNC6Vi8elckb/uOaDCYAnF/b+B/a8D/tXQY2n6fH4wQ3BZOA3ISKh2Y8REemqFEZEOkmdz8/n+4r415YjvLstj7LquuCxPlFuvjU6mTljU5k2OJ6Q5m7lgDkyJ2ct7PsQ9n9stpoY/kYn2MwH+Q2eZYaT/tPVEVZEujyFEREL1NT5+GR3IW9/eYSVOwooq2kIJtGhTmaNSOL8UUmcM7wPseGuk39QdSkc/NwMJlkfQ8H2psftIdBvCgz6Jgz8BvQ7E0KaGeUjImIhhRERi3nr/Hy+r5D3tuXx/rb8Jrdy7DaYMiCe80Ylcf7IJIYmRZ44j0ljZfmQtdq8nbN/FXgONT3uDDUDycCzYcBMhRMR6RIURkS6EJ/fIDPnGCt3FPDhzoImc5gApMeHcf7IZM4dmcS0QfGEhjQzZDjAMOBYFmR9YgaUA59AeX7Tcxwuc3r6/mdB/xmQPhXCYtv/h4mInILCiEgXduhYJR/uNIPJ5/uK8NY19A9xOe1MHRjPN4YlcvawREalRJ+8EyyY4aRorxlKDnwGBz6F8rzjTrJB0igzoASWpNF6yJ+IdCiFEZFuotJbx2d7i1i5I5+Pdx8lt7S6yfGECBfThyRw9tBEZg5NPPHpwsczDCjeD9lr4OAac12878TznGHmPCfpU6HfVHMdkdiOv0xEejuFEZFuyDAM9h0t55M9hXyyp5Av9hcFn5UTkB4fxrRBCUwbFM+0QQmkx4edur8JmH1ODm+Awxvrl81QU3rieXGDzICSNslcUieAO6odf6GI9CYKIyI9gLfOT2ZOCZ/tLeSzvYVk5pRQ52/6P9mU6FCmDY5n6qB4pg2KZ0ifr+kMC+bTh4v2QM46c0hxzjoo3NXMiTZIGAIp4yF1vBlOUiZozhMRaRGFEZEeqLymjvUHilmXZS5fHiqh1tf0f8LxES7OHBjHlAHxnDEgljFpMafuEBtQWQxHNjcsuVugNKf5c6P7NgSUlPHmHCix/eHrQpCI9CoKIyK9QJXXx6bsY8Fwsin7WPChfgEuh53RadFMHhDHGf3jOGNALKkxYS37gvKjkLcFcr+EvC/NdXP9TwDc0ZA8BpLHmuuUcWanWU3OJtJrKYyI9ELeOj9bD5ey/kAxmw4eY1P2MQrLvSeclxYTyqQBcUzoF8PYvuYSHRrSsi+pKYO8r8yWk7wvzfXRXeCvbebk+ts8gZDSZ6Q5iid+ENhb0FojIt2awoiIYBgGOcVVbMwuZtPBEjZlH2NHrgd/M/+rH5QYwbi+MYzvF8OE9FjGpEUT7mrh0N86LxTuhvxtkL/VDCv526CioPnzHW5IHA59hpvrxGGQOAIShmqyNpEeRGFERJpVUVPHlkMlbM4uYeuhUrYeLuVwSdUJ59ltMDw5irF9YxiTFs3o1GhGp0UT1dIWFIDyAsj/ygwnBTvMae2P7oK6E78PAJvdfEBgoAUlaaS5HT9EIUWkG+rQMLJ06VJ+//vfk5eXx4QJE3j00UeZOnVqs+cuW7aM559/nq+++gqAyZMn8+CDD570/OYojIh0rOIKL18dNoNJZk4JXx4qId9T0+y5AxLCGZkSxciUaHOdGs2A+PBTT8zWmN8HJQehYKfZmlK4p369y3wmT3Nsdogd0KgVZZjZipIwFCKT1XFWpIvqsDDy8ssvM3/+fJ588kmmTZvGI488wquvvsquXbtISko64fx58+Yxc+ZMZsyYQWhoKL/97W9544032LZtG3379m3XHyMi7SevtJoth0rYdsTD9iOlbDviOWFCtoCwEAcjUqIYlRrFqNRoRqZEMzw58tQPAzyeYZjT2hfsMJej9evC3ScPKQCuKLMPSsIQswUlfnDDdkSigoqIhTosjEybNo0zzzyTxx57DAC/3096ejo//elPueuuu772/T6fj7i4OB577DHmz5/fou9UGBHpGoorvOzI9bAzr4yd9evd+WUnjOAJ6BPlZlhSJMOSIhmeEsWI5CiGJUcRE9aKWz2GYd7uCbSeFO41p78v2mu2sBjNfzdgjvCJH2QGlLhB5nbcQHM7Ok2daEU6WEv/frfqwRRer5eNGzeyaNGi4D673U5GRgZr1qxp0WdUVlZSW1tLfHz8Sc+pqamhpqahidjj8bSmTBHpIPERLmbWT0sf4PMbZBVWsCPX0ySoHCmt5mhZDUfLavh8X1GTz0mNCWVYchRD+0QyJCmCIX0iGdInksRI14kTttlsEJVsLoO+0fRYndd8aGDxfijaZw47Ltpnvi49BDUec7RP7pYTf4zDZc6NEgwpgaAywNyvmWdFOk2rwkhhYSE+n4/k5OQm+5OTk9m5c2eLPuPOO+8kLS2NjIyMk56zZMkS7r///taUJiIWcdhtDE2KZGhSJHMnpAX3l9fUsbegnD35ZewpKGd3fhm788o4UlpNbv2yevfRJp8VHepkUJ9IBidGMKh+GdzHXDc7ssfpgj4jzOV4tdVmy0kgnBzLguIsOHYASrLB521oYWlOWHx9MKkPJ7H9G22na/4UkXbUqY/sfOihh1i+fDmrVq0iNPTkPeMXLVrEwoULg689Hg/p6emdUaKItJNIt5OJ6bFMTI9tst9TXcuefDOc7CsoZ9/RcvYdrSDnWCWe6jq25JSwJafkhM9LiQ41A0qfCAYnRjAwIYKBiRH0jw/H5bSfWEBI6MmDit9ntpw0DijHGgWVqmNQVWwuRzY3/wPD4s1QEpNuzkgbnQpRaebtn+g0iOkHTndrL5tIr9SqMJKYmIjD4SA/P7/J/vz8fFJSUk753j/84Q889NBD/Oc//2H8+PGnPNftduN263/EIj1RdGgIkwfEMXlAXJP91bU+DhZVklVYzv7CCrKOVpjrwgqKK7zkearJ81SzZn/TWz52G6TFhjEgIZz+8REMSAhnQHw46fHh9E8Ib34yN7vDbPWIGwCDZ514vNpjtqocO2hOiV+SbW6XHISSHPMhg4Gw0twtoIDIZDOUxKSb60BQie5rLlEp6rciQhs7sE6dOpVHH30UMDuw9u/fn1tvvfWkHVh/97vf8cADD/Dee+9x1llntbpIdWAV6d1KKr3sL6xg/9EKDhRWkFVkhpUDRRUnPNX4eLHhIfSPDyc9Lpx+8WHB7fT4cNJiQ3E72xAGqkvNUFKaY67LjoAnt359BEoPn3wulcZsjoZWlJh+EJVqBpTI5Pp1itnioltC0k116NDea6+9lr/85S9MnTqVRx55hFdeeYWdO3eSnJzM/Pnz6du3L0uWLAHgt7/9LYsXL+bFF19k5syZwc+JjIwkMjKyXX+MiPQuhmFwtKyGg8WVHCyq5GBRhbkuruRQcSVFFSdOhd+YzQZ9It30iwujb1w4fWPD6BsXRr/6dd/YMCLcbbibbRjmgwdLs83bQSU54DlsBpXAUnYE/HUt+zx3TP1toFQzvARCS3RaQ2iJTAJHK0YpiXSCDp307LHHHgtOejZx4kT+/Oc/M23aNABmzZrFwIEDefbZZwEYOHAgBw8ePOEz7r33Xu677752/TEiIo1V1NSRc8wMKjnFlRw6VkV2sbmdc6yS6tpTDAuuFxseQlpMQzhJiw0lNSaM1JhQUmJCSY4OJcTRTJ+Vr+P3mfOqlB42W1hKD0FZHpTnmevAUlvRwg+0QXiCGU4i+phzrET0MfdF9DHDSmSS2eoSkWR2/hXpYJoOXkTkFAzDoKjCy+FjVRwuqQquDwVfmx1qv47NBklRblJjmgaV5OjA4iY5OpTQkDbcDjIM88GEZbn1rSmBdV7T7fJ8ME59u+oEYXFmMAkElMjkhtAS0afRkqiOuNJmCiMiIqeprLqWIyXVHC6p5PCxKg6VVJFXWk1uSTW5HnO71tey/4TGhoeQUh9QAmElKdpNUlQoSVFukqLdJEa629jK4ofKIjOUlOdB+VGoLISKwHLUfGhheYF5TktvDwW4YxpaWiISG1pbIhIhPLH+WKNt3S6SegojIiIdzO83W1dyS6s4UlJdv64iz1NDvqeagvoRQC25HQRmK0tChDvYmpIU5SYpyk2f4BJKn0g3iVGulj9R+cSizaHLFfXBJBBQyvKaBpfAdmuDC5jhJTzOHP4cHl+/Tqjfjmu6HTgnJFxT9/dACiMiIl2AYRh4quvI91STV1q/1IeUAk8NR8uqyffUcLS8Bp+/5f85Dnc5SIw0Q0pipIvESHej1276RLlIiHCTGOUmwuU4cWbblhUP1SUNwaS8oL7Fpch83bj1pbLQbJ051fT8p+JwN4SUYIBpvI47bjsOQmPB0anTZUkrKYyIiHQjfr9BcaW3vkXFbFkxQ4o5rX5BWQ0FnhoKy2tO+iygkwkNsZvBJNJFQqSbhAgX8ZEu4sNdxEe4SIh0ERduBpr4CBfhbQ0vgVaXyiJzDpbK4uPWRfXbx5oe89e2/rsC3NEQFtsQTsLizNfHb4fGNF3c0erE2wkURkREeiDDMCivqaOw3EtheQ2FZWZAOVru5Wj9dnAp81JV28qOrTSEl/gIF3ERLuLDQ4itDy7maxdxESHm63AXseEhbZuvxfxB4K1oCCaBwNIk0Bw7brvEnHjudDlDG4JJaAyERh+3HVhHmfvdUQ3HQmPNfWqZOSWFERERodJbR2GZl8KKGorLvRRV1FBY7qW4wlyKKrwUB495W93qEhDuchBXH1Liwl3EhJnruPogExcRQmyYi5jwEGLDzH3RoU6cbemwC+CrMyefqyo2w0nVMfOWUiCsHL9d7THPry4Fb1nbvrM5IeH1ASa60TqqIcC4IhteB84JvG58rId2+u2Qp/aKiEj3Eu5y0j/BSf+E8K891zAMKr0+iupDS1G5l2OVXkoqaymu9HKswnx9rKLpa78BlV4flV5zWHRrRLqdxISFEBMWQmy4ucSEma0tsWEhRNcfiw4NITrMSXSo+Toq1IkzIgEiElp/Ufw+84nO1Z76dX1ICb72mAGmxmMOrW68P7AOzP9SW2ku5Xmtr6MxZ2jTEBMMMxHgjmwILq7IRvuiGo65IurPieyWnYEVRkREBACbzUaE20mEu2XhBcy+LmXVdWZIqWwIL8cqaykJ7qultLKWkirzWEllLeU15iid8po6ymvqWh1iwAwy0aFOok8SWqICx0Kd9fvr94WGEBUagzMs7uu/5GR8tfVBpfTEoOItbwgygTDjLa9/3fic8obHBtRVm0vF0VN/b4vY6sNJRKOg0mgJaRxwGoWaoRnmPDMWUBgREZE2s9ttxISHEBMewkBa/gydOp8fT3UdpVVmaCmtqq3frl+qvJRW1uKprsVTVYen2jzuqaqlov55RIEgc6S0uk21h7scwfASVR9eIt3Hb5+4LzLUSZTbSWRoNGFxcW3r7BsQCDUnLPVhxltu9qkJbNeUN6xrPOYxb0X9eeX1H2o0ep1/qm9v6ob3FUZERKT3cDrsxEeYnWJpRYgBqPX5Kauuw1MfYBqCihluyqobQoy5Xb+uDzWBhyuat5Z85Hna/jvsNohwB8JJIKyEEOV2EuF2EOkOIdLtCLY4RdavI9wOotwh9eeEExEeTXhsG0cxBfj9DbeNasqOCyr1202OBcJN/evIPm3/7tOkMCIiIt1KSJMg03q1Pj/l1WYwCYSawHZ5TR1l9eGlYdt8XVZdR0VNHWX1LTKGAX6D4Dmc5gAfmw0iXE7CXY5gaAlsh7udRLodhLucRLgchLvr1y4z2IS5Gl6HuyIId0cTEekkLMSB3d71+48ojIiISK8S4rATVz9Mua0Mw6Cq1hcMMOWNgkxFfVgJvC6vqaWixkd5jXkscLyixmdue81gYxgNt54Kymra7feGhTiIcAeCioNwl9lSExZibgeCzPzpA1vcV6i9KYyIiIi0ks1mq//j7iT5ND8rEGwaB5SKmjoqvI1ee821eWupLhhsKr0+qrw+Krw+qrx1lNeY68paH4GJO6pqffXzzXhPWcdF41MVRkRERHqjxsGGqPb5TMMwqKnzNwowPiq8dVTWmOsqb8M6cDwtJqx9vrwNFEZERER6GJvNRmiIg9AQB22YiaXTtXHqOxEREZH2oTAiIiIillIYEREREUspjIiIiIilFEZERETEUgojIiIiYimFEREREbGUwoiIiIhYSmFERERELKUwIiIiIpZSGBERERFLKYyIiIiIpRRGRERExFLd4qm9hmEA4PF4LK5EREREWirwdzvwd/xkukUYKSsrAyA9Pd3iSkRERKS1ysrKiImJOelxm/F1caUL8Pv9HDlyhKioKGw2W7t9rsfjIT09nZycHKKjo9vtc+VEutadR9e6c+l6dx5d687TXtfaMAzKyspIS0vDbj95z5Bu0TJit9vp169fh31+dHS0/sXuJLrWnUfXunPpenceXevO0x7X+lQtIgHqwCoiIiKWUhgRERERS/XqMOJ2u7n33ntxu91Wl9Lj6Vp3Hl3rzqXr3Xl0rTtPZ1/rbtGBVURERHquXt0yIiIiItZTGBERERFLKYyIiIiIpRRGRERExFK9OowsXbqUgQMHEhoayrRp01i3bp3VJXV7S5Ys4cwzzyQqKoqkpCQuu+wydu3a1eSc6upqFixYQEJCApGRkVxxxRXk5+dbVHHP8NBDD2Gz2bj99tuD+3Sd29fhw4f54Q9/SEJCAmFhYYwbN44NGzYEjxuGweLFi0lNTSUsLIyMjAz27NljYcXdk8/n45577mHQoEGEhYUxZMgQfvOb3zR5tomuddusXr2auXPnkpaWhs1m480332xyvCXXtbi4mHnz5hEdHU1sbCw/+tGPKC8vP/3ijF5q+fLlhsvlMp5++mlj27Ztxk033WTExsYa+fn5VpfWrc2ePdt45plnjK+++srIzMw0LrroIqN///5GeXl58Jybb77ZSE9PN1auXGls2LDBOOuss4wZM2ZYWHX3tm7dOmPgwIHG+PHjjdtuuy24X9e5/RQXFxsDBgwwrrvuOmPt2rXG/v37jffee8/Yu3dv8JyHHnrIiImJMd58801jy5YtxiWXXGIMGjTIqKqqsrDy7ueBBx4wEhISjLffftvIysoyXn31VSMyMtL405/+FDxH17ptVqxYYdx9993G66+/bgDGG2+80eR4S67rhRdeaEyYMMH44osvjE8++cQYOnSo8YMf/OC0a+u1YWTq1KnGggULgq99Pp+RlpZmLFmyxMKqep6CggIDMD7++GPDMAyjpKTECAkJMV599dXgOTt27DAAY82aNVaV2W2VlZUZw4YNMz744APjnHPOCYYRXef2deeddxpnn332SY/7/X4jJSXF+P3vfx/cV1JSYrjdbuOll17qjBJ7jIsvvti44YYbmuy7/PLLjXnz5hmGoWvdXo4PIy25rtu3bzcAY/369cFz/v3vfxs2m804fPjwadXTK2/TeL1eNm7cSEZGRnCf3W4nIyODNWvWWFhZz1NaWgpAfHw8ABs3bqS2trbJtR85ciT9+/fXtW+DBQsWcPHFFze5nqDr3N7eeustpkyZwpVXXklSUhKTJk1i2bJlweNZWVnk5eU1ud4xMTFMmzZN17uVZsyYwcqVK9m9ezcAW7Zs4dNPP2XOnDmArnVHacl1XbNmDbGxsUyZMiV4TkZGBna7nbVr157W93eLB+W1t8LCQnw+H8nJyU32Jycns3PnTouq6nn8fj+33347M2fOZOzYsQDk5eXhcrmIjY1tcm5ycjJ5eXkWVNl9LV++nE2bNrF+/foTjuk6t6/9+/fzxBNPsHDhQn75y1+yfv16fvazn+Fyubj22muD17S5/6boerfOXXfdhcfjYeTIkTgcDnw+Hw888ADz5s0D0LXuIC25rnl5eSQlJTU57nQ6iY+PP+1r3yvDiHSOBQsW8NVXX/Hpp59aXUqPk5OTw2233cYHH3xAaGio1eX0eH6/nylTpvDggw8CMGnSJL766iuefPJJrr32Wour61leeeUVXnjhBV588UXGjBlDZmYmt99+O2lpabrWPVivvE2TmJiIw+E4YWRBfn4+KSkpFlXVs9x66628/fbbfPTRR/Tr1y+4PyUlBa/XS0lJSZPzde1bZ+PGjRQUFHDGGWfgdDpxOp18/PHH/PnPf8bpdJKcnKzr3I5SU1MZPXp0k32jRo0iOzsbIHhN9d+U0/eLX/yCu+66i+9///uMGzeOa665hjvuuIMlS5YAutYdpSXXNSUlhYKCgibH6+rqKC4uPu1r3yvDiMvlYvLkyaxcuTK4z+/3s3LlSqZPn25hZd2fYRjceuutvPHGG3z44YcMGjSoyfHJkycTEhLS5Nrv2rWL7OxsXftWOP/889m6dSuZmZnBZcqUKcybNy+4revcfmbOnHnCEPXdu3czYMAAAAYNGkRKSkqT6+3xeFi7dq2udytVVlZitzf90+RwOPD7/YCudUdpyXWdPn06JSUlbNy4MXjOhx9+iN/vZ9q0aadXwGl1f+3Gli9fbrjdbuPZZ581tm/fbvz4xz82YmNjjby8PKtL69ZuueUWIyYmxli1apWRm5sbXCorK4Pn3HzzzUb//v2NDz/80NiwYYMxffp0Y/r06RZW3TM0Hk1jGLrO7WndunWG0+k0HnjgAWPPnj3GCy+8YISHhxv/+Mc/guc89NBDRmxsrPHPf/7T+PLLL41LL71Uw03b4NprrzX69u0bHNr7+uuvG4mJicZ///d/B8/RtW6bsrIyY/PmzcbmzZsNwHj44YeNzZs3GwcPHjQMo2XX9cILLzQmTZpkrF271vj000+NYcOGaWjv6Xr00UeN/v37Gy6Xy5g6darxxRdfWF1Stwc0uzzzzDPBc6qqqoyf/OQnRlxcnBEeHm585zvfMXJzc60ruoc4PozoOrevf/3rX8bYsWMNt9ttjBw50njqqaeaHPf7/cY999xjJCcnG2632zj//PONXbt2WVRt9+XxeIzbbrvN6N+/vxEaGmoMHjzYuPvuu42amprgObrWbfPRRx81+9/na6+91jCMll3XoqIi4wc/+IERGRlpREdHG9dff71RVlZ22rXZDKPRtHYiIiIinaxX9hkRERGRrkNhRERERCylMCIiIiKWUhgRERERSymMiIiIiKUURkRERMRSCiMiIiJiKYURERERsZTCiIiIiFhKYUREREQspTAiIiIillIYEREREUv9fwKwXeZqtre5AAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["# Plot the accuracy too\n","plt.plot(r.history['accuracy'], label='acc')\n","plt.plot(r.history['val_accuracy'], label='val_acc')\n","plt.legend();"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":432},"id":"l_7VDaVd8OEB","executionInfo":{"status":"ok","timestamp":1727330847144,"user_tz":-330,"elapsed":1101,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"1c8cb62b-d848-4993-8675-1f58c19070ff"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **Part 2: Making Predictions**\n","This goes with the lecture \"Making Predictions\"\n"],"metadata":{"id":"uoq6sGnK8Tw-"}},{"cell_type":"code","source":["# Make predictions\n","P = model.predict(X_test)\n","print(P) # they are outputs of the sigmoid, interpreted as probabilities p(y = 1 | x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZXMZqUQR8RQe","executionInfo":{"status":"ok","timestamp":1727330890615,"user_tz":-330,"elapsed":415,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"49fad909-70f4-4f17-c6e5-6267950c7ce2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step\n","[[3.9518997e-03]\n"," [5.7438374e-01]\n"," [9.6160901e-01]\n"," [7.1236670e-02]\n"," [9.9834770e-01]\n"," [4.5401901e-03]\n"," [9.5023799e-01]\n"," [9.8952359e-01]\n"," [9.6453464e-01]\n"," [9.2530109e-02]\n"," [9.4966179e-01]\n"," [9.0330309e-01]\n"," [8.7187725e-01]\n"," [8.4945089e-01]\n"," [9.9690813e-01]\n"," [9.9288207e-01]\n"," [9.9489743e-01]\n"," [3.1564597e-02]\n"," [1.9620568e-02]\n"," [3.4445163e-02]\n"," [9.1002500e-01]\n"," [9.8707455e-01]\n"," [2.0823003e-01]\n"," [6.2904507e-01]\n"," [7.1023387e-01]\n"," [9.9916762e-01]\n"," [9.3034637e-01]\n"," [9.7953904e-01]\n"," [7.9952693e-01]\n"," [9.8766923e-01]\n"," [9.7805947e-01]\n"," [9.9550653e-01]\n"," [3.3886451e-02]\n"," [2.6294649e-02]\n"," [9.9739218e-01]\n"," [9.6239060e-01]\n"," [9.8452330e-01]\n"," [7.8335065e-01]\n"," [1.6875566e-03]\n"," [7.6898450e-01]\n"," [6.0044758e-02]\n"," [9.8192787e-01]\n"," [9.9352598e-01]\n"," [5.2563328e-01]\n"," [2.0442037e-01]\n"," [9.9941748e-01]\n"," [4.1243121e-01]\n"," [4.0380983e-03]\n"," [2.6879674e-02]\n"," [6.2004703e-01]\n"," [9.9623704e-01]\n"," [9.7498035e-01]\n"," [9.8060161e-01]\n"," [9.7854036e-01]\n"," [3.2208818e-01]\n"," [8.8408339e-01]\n"," [9.7877681e-01]\n"," [2.4966109e-01]\n"," [4.2204553e-01]\n"," [7.1275824e-01]\n"," [9.8053545e-01]\n"," [8.3050644e-01]\n"," [9.8177218e-01]\n"," [9.4108021e-01]\n"," [9.5935708e-01]\n"," [9.9292654e-01]\n"," [9.6980435e-01]\n"," [9.9657476e-01]\n"," [9.9399471e-01]\n"," [9.7644109e-01]\n"," [7.7825391e-01]\n"," [1.8453909e-02]\n"," [3.9478949e-01]\n"," [9.9923235e-01]\n"," [6.2248045e-01]\n"," [9.2670810e-01]\n"," [1.6298984e-01]\n"," [6.8678032e-03]\n"," [9.8778754e-01]\n"," [9.9948591e-01]\n"," [9.9159670e-01]\n"," [4.7578746e-03]\n"," [1.6464237e-02]\n"," [9.4655520e-01]\n"," [7.1224600e-02]\n"," [6.1316013e-01]\n"," [9.6014810e-01]\n"," [8.3717388e-01]\n"," [9.7328478e-01]\n"," [9.8432064e-01]\n"," [9.9244350e-01]\n"," [9.7291857e-01]\n"," [6.1495900e-01]\n"," [9.3056128e-04]\n"," [9.9977285e-01]\n"," [9.7428131e-01]\n"," [9.1733968e-01]\n"," [8.3457828e-01]\n"," [8.0871338e-01]\n"," [3.2014525e-01]\n"," [2.5820904e-05]\n"," [9.9078965e-01]\n"," [5.3419761e-05]\n"," [3.8933888e-01]\n"," [9.8460740e-01]\n"," [5.7005316e-01]\n"," [6.8505877e-01]\n"," [8.7319142e-01]\n"," [7.7462381e-01]\n"," [1.0863943e-01]\n"," [7.9657060e-01]\n"," [9.8860312e-01]\n"," [9.9475783e-01]\n"," [9.6451688e-01]\n"," [2.2987469e-01]\n"," [8.8560897e-01]\n"," [2.4771897e-02]\n"," [2.7305988e-04]\n"," [9.7642463e-01]\n"," [9.2857426e-01]\n"," [7.7458066e-01]\n"," [9.9866968e-01]\n"," [7.7016756e-04]\n"," [9.5130849e-01]\n"," [9.9471182e-01]\n"," [2.9113848e-04]\n"," [2.3883299e-06]\n"," [6.5307975e-01]\n"," [9.9785584e-01]\n"," [9.8681211e-01]\n"," [9.9522799e-01]\n"," [8.8345480e-01]\n"," [2.9079866e-04]\n"," [9.5499641e-01]\n"," [9.9098587e-01]\n"," [9.6864295e-01]\n"," [1.4065206e-09]\n"," [1.6725384e-01]\n"," [9.9711508e-01]\n"," [9.4654504e-05]\n"," [9.8498660e-01]\n"," [5.3324625e-03]\n"," [9.7769260e-01]\n"," [4.3914169e-01]\n"," [9.9241972e-01]\n"," [9.9145460e-01]\n"," [9.7377658e-01]\n"," [2.3105040e-01]\n"," [9.7787011e-01]\n"," [2.6147071e-01]\n"," [8.7400019e-01]\n"," [1.6119389e-02]\n"," [3.8199283e-03]\n"," [9.8870933e-01]\n"," [1.7271942e-03]\n"," [6.5927541e-01]\n"," [8.8077319e-01]\n"," [9.9083817e-01]\n"," [4.3838280e-01]\n"," [7.0998341e-01]\n"," [8.9536262e-01]\n"," [1.4536065e-02]\n"," [9.9689120e-01]\n"," [9.9214065e-01]\n"," [9.9413735e-01]\n"," [8.9713234e-01]\n"," [9.5239812e-01]\n"," [1.9879760e-01]\n"," [9.8935580e-01]\n"," [9.2165971e-01]\n"," [9.4969010e-01]\n"," [5.0675021e-03]\n"," [1.1840241e-02]\n"," [7.1406019e-01]\n"," [9.4748193e-01]\n"," [6.9601578e-03]\n"," [9.6892107e-01]\n"," [9.5626849e-01]\n"," [9.5889723e-01]\n"," [7.6968157e-01]\n"," [9.1247529e-01]\n"," [2.0219306e-06]\n"," [5.8907264e-01]\n"," [8.7388698e-03]\n"," [9.5216078e-01]\n"," [9.9214685e-01]\n"," [8.6768013e-01]\n"," [1.3905936e-01]]\n"]}]},{"cell_type":"code","source":["# Round to get the actual predictions\n","# Note: has to be flattened since the targets are size (N,) while the predictions are size (N,1)\n","import numpy as np\n","P = np.round(P).flatten()\n","print(P)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dndn6W2Y8b37","executionInfo":{"status":"ok","timestamp":1727330910427,"user_tz":-330,"elapsed":388,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"f23ca968-0d6f-48c8-8ff3-d65cf14729bb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 1. 1. 0. 1. 0. 1. 1. 1. 0. 1. 1. 1. 1. 1. 1. 1. 0. 0. 0. 1. 1. 0. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 0. 0. 1. 1. 1. 1. 0. 1. 0. 1. 1. 1. 0. 1. 0. 0.\n"," 0. 1. 1. 1. 1. 1. 0. 1. 1. 0. 0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0.\n"," 0. 1. 1. 1. 0. 0. 1. 1. 1. 0. 0. 1. 0. 1. 1. 1. 1. 1. 1. 1. 1. 0. 1. 1.\n"," 1. 1. 1. 0. 0. 1. 0. 0. 1. 1. 1. 1. 1. 0. 1. 1. 1. 1. 0. 1. 0. 0. 1. 1.\n"," 1. 1. 0. 1. 1. 0. 0. 1. 1. 1. 1. 1. 0. 1. 1. 1. 0. 0. 1. 0. 1. 0. 1. 0.\n"," 1. 1. 1. 0. 1. 0. 1. 0. 0. 1. 0. 1. 1. 1. 0. 1. 1. 0. 1. 1. 1. 1. 1. 0.\n"," 1. 1. 1. 0. 0. 1. 1. 0. 1. 1. 1. 1. 1. 0. 1. 0. 1. 1. 1. 0.]\n"]}]},{"cell_type":"markdown","source":["# Part 3: Saving and Loading a Model\n","This goes with the lecture \"Saving and Loading a Model\""],"metadata":{"id":"U0pon_0b8lwG"}},{"cell_type":"code","source":["# Let's now save our model to a file\n","model.save('linearclassifier.h5')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_G487oiH8n5n","executionInfo":{"status":"ok","timestamp":1727330954401,"user_tz":-330,"elapsed":489,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"a2ba1389-57f0-4c31-9ffb-013b9533e7d6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"]}]},{"cell_type":"code","source":["# Check that the model file exists\n","!ls -lh"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"klz2AnFW8soV","executionInfo":{"status":"ok","timestamp":1727330964264,"user_tz":-330,"elapsed":505,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"9890942d-80cc-4d97-f0d4-d092464e16a1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["total 24K\n","-rw-r--r-- 1 root root  18K Sep 26 06:09 linearclassifier.h5\n","drwxr-xr-x 1 root root 4.0K Sep 24 13:23 sample_data\n"]}]},{"cell_type":"code","source":["# Let's load the model and confirm that it still works\n","# Note: there is a bug in Keras where load/save only works if you DON'T use the Input() layer explicitly\n","# So, make sure you define the model with ONLY Dense(1, input_shape=(D,))\n","# At least, until the bug is fixed\n","# https://github.com/keras-team/keras/issues/10417\n","model = tf.keras.models.load_model('linearclassifier.h5')\n","print(model.layers)\n","model.evaluate(X_test, y_test)"],"metadata":{"id":"6TVbY-hX8vor","executionInfo":{"status":"ok","timestamp":1727330976694,"user_tz":-330,"elapsed":790,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"99737227-04dc-4bb2-f13c-d41068b10b9f","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]},{"output_type":"stream","name":"stdout","text":["[<Dense name=dense, built=True>]\n","\u001b[1m6/6\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9628 - loss: 0.1345  \n"]},{"output_type":"execute_result","data":{"text/plain":["[0.13734863698482513, 0.9627659320831299]"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["# Download the file - requires Chrome (at this point)\n","from google.colab import files\n","files.download('linearclassifier.h5')"],"metadata":{"id":"c2q89NXq8xj3","executionInfo":{"status":"ok","timestamp":1727331667260,"user_tz":-330,"elapsed":424,"user":{"displayName":"JONATHAN GOMES","userId":"12412195592826991781"}},"outputId":"b386c8f2-fe26-4d99-84db-5e1090fdd35e","colab":{"base_uri":"https://localhost:8080/","height":17}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_d2ea7718-9377-45db-ad44-5238d78343f6\", \"linearclassifier.h5\", 17960)"]},"metadata":{}}]}]}